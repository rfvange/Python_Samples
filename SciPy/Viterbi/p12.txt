% generates the output of the hard-decision Viterbi decoder % r = [0 1 1 0 0 0 1 0 1 1]   % used to verify the theoretical working of the (2. L 3) % convolutional encoder
[n. K] = size(g):
m = K-l:
max_state = 2 A m;             % number of states
[temp. rec_size] = size(r);
L_total = rec_size •'' n;         % number of input bits including tail bits
L_info = L_total - m;          % number of input bits excluding tail bits
% set infinity to an arbitrarily small value inf=-10;
% initializes trellis and path matrices trellis = inf * ones(max_state. Ljotal);
% this matrix stores the maximum hamming distances as the trellis is formed path = zeros(max_state. Ljotal);
% this matrix keeps a track of the paths traced as we receive the codeword new_path = path:
% * Initializes output and transition matrices *
% - Start -
for state = 1 :max_state state_vector = bin_state(state -1, m);
% generates the states i.e. state_vector = 00.01.10.11 when variable state = 1,2,3,4 [out_0. state_0] = encode_bit(g. 0. state_vector);
% determines o ;p and next state bits given current state{state_vector) and input bit = 0 [out_l: state_l] = encode_bit(g. 1. state_vector);
0 o determines op and next state bits given current state{state_vector) and input bit = 1 output(state.:) = [out_0 out_l]:
%        0   1   (received bits)
° o 00 00   11   (output bits siven input states and received bits)
%01 11   00
% 10 10  01
%11 01   10 transin'on(state.:) = [(int_state(state_0) •*• 1) (int_state(state_l) + 1)];
%      0   1    (received bits)
0 o 00 1    3   (outputs states given input states and received bits)
%01 1    3
% 10 2   4
%11 2   4